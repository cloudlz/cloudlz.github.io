<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git多平台行尾字符问题]]></title>
    <url>%2F2019%2F05%2F24%2Fgit%E5%A4%9A%E5%B9%B3%E5%8F%B0%E8%A1%8C%E5%B0%BE%E5%AD%97%E7%AC%A6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[各个操作系统默认行尾字符格式CR= Carriage Return= 回车= \r LF= Line Feed= 换行= \n Windows=CRLF=\n\r Unix系=LF=\n——包括linux&amp;mac 某一次git add . ： $ git add . fatal: CRLF would be replaced by LF ... 当我们在进行代码更新时，可能会因为不同操作系统的提交，或者一些设置问题，使得一个文件中含有多种不同的行尾字符符格式，从而影响整个git仓库。一般git仓库中统一使用LF 解决办法一. 修改编辑器和git配置 先修改编辑器默认行尾字符格式 搜索eol（或行尾字符）将其改为 Unix and OS X，LF，\n其中之一 也可在项目文件夹根目录中加入文件 .editorconfig，详情见editorconfig官网 Git设置 git config --global core.autocrlf false git config --global core.safecrlf true 注 AutoCRLF 提交时转换为LF，检出时转换为CRLF git config --global core.autocrlf true 提交时转换为LF，检出时不转换 git config --global core.autocrlf input 提交检出均不转换 git config --global core.autocrlf false SafeCRLF 拒绝提交包含混合换行符的文件 git config --global core.safecrlf true 允许提交包含混合换行符的文件 git config --global core.safecrlf false 提交包含混合换行符的文件时给出警告 git config --global core.safecrlf warn 常见一定是CRLF的文件： 一些字体、图片文件，虽然是二进制文件，但是他们的格式可能是CRLF windows可执行文件bat （若项目中包含这些文件，使用git config –global core.autocrlf input可能会使图片或bat文件无法提交，所以建议git config –global core.autocrlf false和git config –global core.safecrlf true） 二. 项目根目录创建gitattributes文件（但是好像很多项目中不用，可能拥有代码规范和审查吧）这个文件可以让通过git传输的文件格式按配置上传，拥有最高优先级。 这里有常见的.gitattribute配置文件范本 举例.gitattribute配置文件： # Set the default behavior, in case people don&apos;t have core.autocrlf set. * text=auto # Declare files that will always have LF line endings on checkout. *.sh text eol=lf # Declare files that will always have CRLF line endings on checkout. *.bat text eol=crlf # Denote all files that are truly binary and should not be modified. # img *.png binary *.jpg binary *.ico binary *.svg binary *.gif binary # font *.ttf binary *.eot binary *.woff binary *.otf binary *.woff2 binary # doc *.xlsx binary *.docx binary # media *.mp3 binary *.mp4 binary # data *.db binary *.dat binary]]></content>
      <categories>
        <category>一些问题</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>行尾字符</tag>
        <tag>CRLF</tag>
        <tag>LF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[长跑和生活长跑]]></title>
    <url>%2F2019%2F04%2F25%2F%E9%95%BF%E8%B7%91%E5%92%8C%E7%94%9F%E6%B4%BB%E9%95%BF%E8%B7%91%2F</url>
    <content type="text"><![CDATA[长跑我在高中也算是两年的长跑运动和爱好者了，开始的时候或许是因为某些原因，但是跑了几个礼拜渐渐喜欢上了这个运动。 。。。 一天天的跑步，某一天，想着跑一次过瘾的，跑一次爽的，我都不记得是20圈还是50圈了，反正很多就是了。前半程是真的痛苦，尽管很多个月或是一年，但是突破一个长度还是有一点痛苦的，我记得半程都是靠脑海中哼歌转移注意力来顶住的，“充满鲜花的世界到底在哪里，不求任何人满意只要对得起自己。。。。”。 但是10圈或是2，30圈的时候，真的是感觉到全身心的舒爽，前所未有，真的感觉跑步是在享受，没有累感（我没有升天），或许这就是苦尽甘来吧。 生活长跑或许生活中的长跑可以像长跑一样吧，顶住现在，应该（？？？不自信，我互动我自己）就能苦尽甘来吧。]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用语法]]></title>
    <url>%2F2019%2F04%2F21%2FMarkdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[概述Markdown是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档，所以它完全兼容HTML语法。它的宗旨是易读易用，所以，就是因为它的轻量化、易读易写特性，它适用性广泛，包括GitHub，各种笔记软件等，基本是一处学习，处处可用，太赚了。 段落段落区分Markdown里文字间相隔一个或以上的空行，就为不同的段落，其余的都是同一个段落。空行指的是行内什么都没有，或者只有空白符（空格或制表符）行尾两个空格以上换行 例： Markdown语法 我是第一段 我也是第一 段 我是第二段 效果 我是第一段 我也是第一 段 我是第二段 段落内字之间不管相隔多少个空格或者制表符（只要没相隔一个完整的空行），都当作一个段落。 首行缩进由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好。当一段前加了四个空格或一个制表符以上时，整段会按照你输入的样子展示，相当于html里的 &lt;pre&gt; 标签,所以，例如首行缩进两个字符只能用html代码实现，使用两个 &amp;emsp; ，或者四个 &amp;ensp; （一定要带上英文的分号） 字体标题标准写法是#加上标题文字 Markdown语法： # 一级标题 ## 二级标题 字体效果加粗：文字左右用两个*号包起来 斜体：文字左右用一个*号包起来 加粗加斜体：文字左右用三个*号包起来 加删除线：文字左右用两个~号包起来 加下划线：用&lt;u&gt;标签实现 Markdown语法： **我要加粗** *我要变斜* ***我要又粗又斜*** ~~我被删了,呜呜呜~~ &lt;u&gt;我带下划线&lt;/u&gt; 效果： 我要加粗我要变斜我要又粗又斜我被删了,呜呜呜我带下划线 分割线在一行中用至少三个 - 、 * 或 _ 来建立一条分隔线，行内不能有其他东西，但可以在符号间插入空格。 Markdown语法： * * * *** --- - - - ___ _ _ _ 效果： 超链接[超链接名](超链接地址 “超链接title”)title可加可不加 Markdown语法： [百度](http://baidu.com) [二珂](https://files.cnblogs.com/files/cloudust/a.gif) 效果 百度二珂 引用单行引用在段落或其他内容前使用 &gt; 符号，就可以将这段内容标记为 ‘引用’ 的内容 &gt;我是被引用的 我是被引用的 多行引用&gt;如果仅在第一行使用, 后面相邻的行即使省略, 也会变成引用内容 如果仅在第一行使用,后面相邻的行即使省略,也会变成引用内容 嵌套引用&gt;也可以在引用中 &gt;&gt;使用嵌套的引用 也可以在引用中 使用嵌套的引用 ## 列表无序列表列表前 - + * 任何一种加空格 有序列表数字+.+空格（可以自动排序） Markdown语法： - www + aaa * zzz 1. aaa 3. ccc 2. bbb 效果 www aaa zzz aaa ccc bbb 嵌套列表1. 第一层 + 1-1 + 1-2 2. 无序列表和有序列表可以随意相互嵌套 1. 2-1 2. 2-2 第一层 1-1 1-2 无序列表和有序列表可以随意相互嵌套 2-1 2-2 表格默认左对齐 | 左对齐 | 中间居中 | 右对齐 | | :--- | :--: | ---: | | 1| 1 | 1 | | 1| 1| 1 | 效果： 左对齐 中间居中 右对齐 1 1 1 1 1 1 代码在代码前后增加 三个反单引号：```可指定语言行内代码两个` 转义可转义的字符 \ ` * _ {} [] () # + - . ! 如果需要避免文本中的符号被当做Markdown标示符而发生不必要的格式转化，可以在符号前加转义符号 \ 来避免。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈开源软件许可协议]]></title>
    <url>%2F2019%2F03%2F30%2F%E6%B5%85%E8%B0%88%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[前言今天github 996ICU 项目中正在讨论 996ICU License，本人也对开源软件许可协议不太了解，故有此文。 开源软件许可协议是什么开源软件许可协议也是协议的一种，首先我们需要大概了解协议是什么 什么是协议泛指国家、政府、政党、团体或个人间就一定问题经谈判、协商后而达成的共同决定。通常用文件形式来体现。国家和政府间的协议往往采取条约的形式。协议有时也作为条约的一种名称。（摘自百度汉语搜索） 简单的来说就是协议就是人，组织之间一种约定好的内容。 开源软件许可协议软件开源让我们可以让我们学习和了解别人优秀的代码。 但是如果我们 Copy 别人的代码没有注意到许可协议的话，我们Copy他人代码的作品可能会因为触犯别人的权益违法。 因此大多数开源协议最低的要求是使用者需要保留原作者对代码的声明即许可协议，毫无顾忌的拿来用了很可能会出事。 所以开源便于互相学习，但并不代表毫无约束。 常见的开源软件许可协议 MIT MIT许可证在所有许可证也许是最开放的。它可以效用于公共领域。它明确授予“不受限制，包括但不限于使用，复制，修改，合并，发布，分发，转让许可和/或销售本软件副本的权利。”唯一的条件是完整的版权声明（声明不保证或责任）包括在内。根据MIT许可证发布的工作可用于任何事物，包括商业和专有软件。 BSD BSD许可类似于MIT许可。 允许我们完全自由地复制，分发和修改任何目的的工作，前提是包含原始许可和版权声明。衍生作品可以在其他许可下或作为专有软件发布。 Apache Apache许可证许可下的代码可以用于开放，免费和专有软件（如MIT和BSD许可证）。 它规定了在任何许可文件中必须保留所有原始版权，归属和商标通知的条件。此外，对于任何修改过的工作，必须包含变更通知。还必须保留任何现有的变更通知。所有这些通知必须分发在文本文件和源代码或文档中。 保留修改通知的这一要求使Apache许可证与MIT和BSD许可证不同。它还包括许多法律条款和条件（除其他目的外）解除原始版权所有者的任何责任。 Apache许可证（版本2）据说与GPL兼容，这意味着包含在两者下许可的代码的项目也必须在GPL版本3下获得许可。 GPL 成立原则是我们应该可以自由使用，更改，共享和分享对自由软件的更改。无论软件如何分发，它都是免费的。这个概念被称为“copyleft”。 GPL的基本原则与MIT，BSD和Apache许可不同，GPL下的工作必须保留在此许可下。可以出售GPL代码，但不能从中派生出专有软件。如果您分发任何衍生作品，则必须在相同许可下提供源代码。基本上，一旦根据GPL发布作品，它仍然是GPL，并且不能应用进一步的限制。 GPL第3版明确指出，虽然GPL下的代码可用于实施数字版权管理（DRM），但使用GPL代码并不算作有效的“保护”，因此，任何破解它的人都无法承担责任。数字版权法。 参考链接 https://choosealicense.com/licenses/ https://www.smashingmagazine.com/2011/06/understanding-copyright-and-licenses/]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>开源协议</tag>
        <tag>协议</tag>
      </tags>
  </entry>
</search>
