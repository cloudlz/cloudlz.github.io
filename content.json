{"meta":{"title":"cloudust的博客","subtitle":"我本微末凡尘，可也心向天空","description":"一只菜鸟","author":"cloudust","url":"https://cloudlz.github.io","root":"/"},"pages":[{"title":"分类","date":"2019-04-20T09:53:00.000Z","updated":"2019-04-23T07:23:44.274Z","comments":false,"path":"categories/index.html","permalink":"https://cloudlz.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-20T09:52:30.000Z","updated":"2019-04-23T07:23:42.746Z","comments":false,"path":"tags/index.html","permalink":"https://cloudlz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown常用语法","slug":"Markdown常用语法","date":"2019-04-21T05:14:40.000Z","updated":"2019-04-25T07:45:35.280Z","comments":true,"path":"2019/04/21/Markdown常用语法/","link":"","permalink":"https://cloudlz.github.io/2019/04/21/Markdown常用语法/","excerpt":"概述Markdown是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档，所以它完全兼容HTML语法。它的宗旨是易读易用，所以，就是因为它的轻量化、易读易写特性，它适用性广泛，包括GitHub，各种笔记软件等，基本是一处学习，处处可用，太赚了。","text":"概述Markdown是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档，所以它完全兼容HTML语法。它的宗旨是易读易用，所以，就是因为它的轻量化、易读易写特性，它适用性广泛，包括GitHub，各种笔记软件等，基本是一处学习，处处可用，太赚了。 段落段落区分Markdown里文字间相隔一个或以上的空行，就为不同的段落，其余的都是同一个段落。空行指的是行内什么都没有，或者只有空白符（空格或制表符）行尾两个空格以上换行 例： Markdown语法 我是第一段 我也是第一 段 我是第二段 效果 我是第一段 我也是第一 段 我是第二段 段落内字之间不管相隔多少个空格或者制表符（只要没相隔一个完整的空行），都当作一个段落。 首行缩进由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好。当一段前加了四个空格或一个制表符以上时，整段会按照你输入的样子展示，相当于html里的 &lt;pre&gt; 标签,所以，例如首行缩进两个字符只能用html代码实现，使用两个 &amp;emsp; ，或者四个 &amp;ensp; （一定要带上英文的分号） 字体标题标准写法是#加上标题文字 Markdown语法： # 一级标题 ## 二级标题 字体效果加粗：文字左右用两个*号包起来 斜体：文字左右用一个*号包起来 加粗加斜体：文字左右用三个*号包起来 加删除线：文字左右用两个~号包起来 加下划线：用&lt;u&gt;标签实现 Markdown语法： **我要加粗** *我要变斜* ***我要又粗又斜*** ~~我被删了,呜呜呜~~ &lt;u&gt;我带下划线&lt;/u&gt; 效果： 我要加粗我要变斜我要又粗又斜我被删了,呜呜呜我带下划线 分割线在一行中用至少三个 - 、 * 或 _ 来建立一条分隔线，行内不能有其他东西，但可以在符号间插入空格。 Markdown语法： * * * *** --- - - - ___ _ _ _ 效果： 超链接[超链接名](超链接地址 “超链接title”)title可加可不加 Markdown语法： [百度](http://baidu.com) [二珂](https://files.cnblogs.com/files/cloudust/a.gif) 效果 百度二珂 引用单行引用在段落或其他内容前使用 &gt; 符号，就可以将这段内容标记为 ‘引用’ 的内容 &gt;我是被引用的 我是被引用的 多行引用&gt;如果仅在第一行使用, 后面相邻的行即使省略, 也会变成引用内容 如果仅在第一行使用,后面相邻的行即使省略,也会变成引用内容 嵌套引用&gt;也可以在引用中 &gt;&gt;使用嵌套的引用 也可以在引用中 使用嵌套的引用 ## 列表无序列表列表前 - + * 任何一种加空格 有序列表数字+.+空格（可以自动排序） Markdown语法： - www + aaa * zzz 1. aaa 3. ccc 2. bbb 效果 www aaa zzz aaa ccc bbb 嵌套列表1. 第一层 + 1-1 + 1-2 2. 无序列表和有序列表可以随意相互嵌套 1. 2-1 2. 2-2 第一层 1-1 1-2 无序列表和有序列表可以随意相互嵌套 2-1 2-2 表格默认左对齐 | 左对齐 | 中间居中 | 右对齐 | | :--- | :--: | ---: | | 1| 1 | 1 | | 1| 1| 1 | 效果： 左对齐 中间居中 右对齐 1 1 1 1 1 1 代码在代码前后增加 三个反单引号：```可指定语言行内代码两个` 转义可转义的字符 \\ ` * _ {} [] () # + - . ! 如果需要避免文本中的符号被当做Markdown标示符而发生不必要的格式转化，可以在符号前加转义符号 \\ 来避免。","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://cloudlz.github.io/categories/工具使用/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://cloudlz.github.io/tags/Markdown/"}]},{"title":"浅谈开源软件许可协议","slug":"浅谈开源软件许可协议","date":"2019-03-30T12:16:46.000Z","updated":"2019-04-25T07:45:06.748Z","comments":true,"path":"2019/03/30/浅谈开源软件许可协议/","link":"","permalink":"https://cloudlz.github.io/2019/03/30/浅谈开源软件许可协议/","excerpt":"前言今天github 996ICU 项目中正在讨论 996ICU License，本人也对开源软件许可协议不太了解，故有此文。","text":"前言今天github 996ICU 项目中正在讨论 996ICU License，本人也对开源软件许可协议不太了解，故有此文。 开源软件许可协议是什么开源软件许可协议也是协议的一种，首先我们需要大概了解协议是什么 什么是协议泛指国家、政府、政党、团体或个人间就一定问题经谈判、协商后而达成的共同决定。通常用文件形式来体现。国家和政府间的协议往往采取条约的形式。协议有时也作为条约的一种名称。（摘自百度汉语搜索） 简单的来说就是协议就是人，组织之间一种约定好的内容。 开源软件许可协议软件开源让我们可以让我们学习和了解别人优秀的代码。 但是如果我们 Copy 别人的代码没有注意到许可协议的话，我们Copy他人代码的作品可能会因为触犯别人的权益违法。 因此大多数开源协议最低的要求是使用者需要保留原作者对代码的声明即许可协议，毫无顾忌的拿来用了很可能会出事。 所以开源便于互相学习，但并不代表毫无约束。 常见的开源软件许可协议 MIT MIT许可证在所有许可证也许是最开放的。它可以效用于公共领域。它明确授予“不受限制，包括但不限于使用，复制，修改，合并，发布，分发，转让许可和/或销售本软件副本的权利。”唯一的条件是完整的版权声明（声明不保证或责任）包括在内。根据MIT许可证发布的工作可用于任何事物，包括商业和专有软件。 BSD BSD许可类似于MIT许可。 允许我们完全自由地复制，分发和修改任何目的的工作，前提是包含原始许可和版权声明。衍生作品可以在其他许可下或作为专有软件发布。 Apache Apache许可证许可下的代码可以用于开放，免费和专有软件（如MIT和BSD许可证）。 它规定了在任何许可文件中必须保留所有原始版权，归属和商标通知的条件。此外，对于任何修改过的工作，必须包含变更通知。还必须保留任何现有的变更通知。所有这些通知必须分发在文本文件和源代码或文档中。 保留修改通知的这一要求使Apache许可证与MIT和BSD许可证不同。它还包括许多法律条款和条件（除其他目的外）解除原始版权所有者的任何责任。 Apache许可证（版本2）据说与GPL兼容，这意味着包含在两者下许可的代码的项目也必须在GPL版本3下获得许可。 GPL 成立原则是我们应该可以自由使用，更改，共享和分享对自由软件的更改。无论软件如何分发，它都是免费的。这个概念被称为“copyleft”。 GPL的基本原则与MIT，BSD和Apache许可不同，GPL下的工作必须保留在此许可下。可以出售GPL代码，但不能从中派生出专有软件。如果您分发任何衍生作品，则必须在相同许可下提供源代码。基本上，一旦根据GPL发布作品，它仍然是GPL，并且不能应用进一步的限制。 GPL第3版明确指出，虽然GPL下的代码可用于实施数字版权管理（DRM），但使用GPL代码并不算作有效的“保护”，因此，任何破解它的人都无法承担责任。数字版权法。 参考链接 https://choosealicense.com/licenses/ https://www.smashingmagazine.com/2011/06/understanding-copyright-and-licenses/","categories":[{"name":"编程相关","slug":"编程相关","permalink":"https://cloudlz.github.io/categories/编程相关/"}],"tags":[{"name":"开源协议","slug":"开源协议","permalink":"https://cloudlz.github.io/tags/开源协议/"},{"name":"协议","slug":"协议","permalink":"https://cloudlz.github.io/tags/协议/"}]}]}